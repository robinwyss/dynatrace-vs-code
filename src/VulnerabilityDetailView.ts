import { CancellationToken, ExtensionContext, Uri, ViewColumn, WebviewPanel, WebviewView, WebviewViewProvider, WebviewViewResolveContext, window } from "vscode";
import { SecurityProblem } from "./types";
import { DynatraceApiClient } from "./dynatrace-api";



export class VulnerabilityDetailView {

    private panel: WebviewPanel | undefined;
    private isDisposed: boolean = true;

    public showVulnreabilityDetails(vulnerabilityDetail: any) {

        if (!this.panel || this.isDisposed) {
            this.panel = this.initializePanel();
        }
        this.panel.reveal();
        this.panel.onDidDispose(e => {
            this.isDisposed = true;
        });

        this.panel.webview.html = this.getWebviewContent(vulnerabilityDetail);

    }

    private initializePanel() {
        this.isDisposed = false;
        return window.createWebviewPanel(
            'openWebview', // Identifies the type of the webview. Used internally
            'Vulnerabillity Details', // Title of the panel displayed to the user
            ViewColumn.Two, // Editor column to show the new webview panel in.
            { // Enable scripts in the webview
                enableScripts: true //Set this to true if you want to enable Javascript. 
            }
        );
        
    }
    //   context.subscriptions.push(openWebview);

    private getWebviewContent(securityProblem: any) {
        const components = securityProblem.vulnerableComponents.map((component: any) => component.displayName).join(',');
        const subtitle = securityProblem.vulnerabilityType === 'CODE_LEVEL' ? securityProblem.codeLevelVulnerabilityDetails.shortVulnerabilityLocation : `${securityProblem.packageName} (${securityProblem.technology})`;
        const vulnId = securityProblem.cveIds && securityProblem.cveIds.length >0 ?  securityProblem.cveIds?.join(',') : securityProblem.displayId;
        return `<!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>${securityProblem.displayId}</title>
      </head>
      <body>
         <h2>${securityProblem.displayId} - ${securityProblem.title}</h2>
         <h3>${subtitle})</h3>
         <div>
            <span>${securityProblem.cveIds?.join(',')} - ${securityProblem.riskAssessment.riskScore} ${securityProblem.riskAssessment.riskLevel}</span><br/>

            <h4>Description</h4>
            <p>${securityProblem.description}</p><br/>
            <h4>Risk Assessment</h4>
            <span>Public Exposure: ${securityProblem.riskAssessment.exposure} <br/>Reachable Data Assets: ${securityProblem.riskAssessment.dataAssets} <br/>
                Public Exploit: ${securityProblem.riskAssessment.publicExploit}<br/>Risk vector: ${securityProblem.riskAssessment.riskVector}</span> <br/>
            <h4>Components</h4>
            <span>${components}</span> <br/>
            <br/>
            <span>First Detected: ${new Date(securityProblem.lastOpenedTimestamp).toLocaleString()}</span><br/>
            <b><a href="${securityProblem.url}">Further details<a/><b>
         </div>
      </body>
      </html>`;
    }
}