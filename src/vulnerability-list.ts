import * as vscode from 'vscode';
import * as path from 'path';
import { SecurityProblem, VulnerabilityType } from './types';

export class DynatraceVulnerabilityProvider implements vscode.TreeDataProvider<vscode.TreeItem> {
    private securityProblems: SecurityProblem[] = [];

    constructor(private vulnerabilityType: VulnerabilityType, securityProblems: SecurityProblem[]) {
        this.securityProblems = securityProblems;
    }

    getTreeItem(element: Vulnerability): vscode.TreeItem {
        return element;
    }

    getChildren(element?: Vulnerability): Thenable<vscode.TreeItem[]> {
        if (element) {
            if (element instanceof Vulnerability) {
                const vulnerability = element as Vulnerability;
                return Promise.resolve(vulnerability.getDetails().map(detail => new vscode.TreeItem(detail, vscode.TreeItemCollapsibleState.None)));
            } else {
                return Promise.resolve([]);
            }
        } else {
            if (this.vulnerabilityType === VulnerabilityType.runtime) {
                return Promise.resolve(this.securityProblems.map(securityProblem => new RuntimeVulnerability(securityProblem)));
            } else if (this.vulnerabilityType === VulnerabilityType.codeLevel) {
                return Promise.resolve(this.securityProblems.map(securityProblem => new CodeLevelVulnerability(securityProblem)));
            } else {
                return Promise.resolve(this.securityProblems.map(securityProblem => new ThirdPartyVulnearbility(securityProblem)));
            }

        }
    }

    private _onDidChangeTreeData: vscode.EventEmitter<Vulnerability | undefined | null | void> = new vscode.EventEmitter<Vulnerability | undefined | null | void>();
    readonly onDidChangeTreeData: vscode.Event<Vulnerability | undefined | null | void> = this._onDidChangeTreeData.event;

    updateData(securityProblems: SecurityProblem[]) {
        this.securityProblems = securityProblems;
        this._onDidChangeTreeData.fire();
    }

}

export abstract class Vulnerability extends vscode.TreeItem {
    securityProblem: SecurityProblem;

    constructor(securityProblem: SecurityProblem, label: string) {
        super(label, vscode.TreeItemCollapsibleState.Collapsed);
        this.securityProblem = securityProblem;

        const icon = path.join(__filename, '..', '..', 'resources', `security-${this.securityProblem.riskAssessment.riskLevel.toLowerCase()}.svg`);
        this.iconPath = {
            "dark": icon,
            "light": icon
        };

        this.command = {
            "title": "Show details",
            "command": "dynatrace.showVulnerability",
            "arguments": [securityProblem.url]
        };
    }

    getDetails() {
        return [this.securityProblem.title, `technology: ${this.securityProblem.technology}`, `Risk Score: ${this.securityProblem.riskAssessment.riskScore} ${this.securityProblem.riskAssessment.riskLevel}`].concat(this.securityProblem.cveIds || []);
    }

}

export class ThirdPartyVulnearbility extends Vulnerability {

    constructor(securityProblem: SecurityProblem) {
        const label = `${securityProblem.riskAssessment.riskScore} - ${securityProblem.packageName}`;
        super(securityProblem, label);
        this.tooltip = `${this.label} - ${securityProblem.title}`;
        this.description = '' + securityProblem.riskAssessment.riskLevel;
    }

}

export class RuntimeVulnerability extends Vulnerability {

    constructor(securityProblem: SecurityProblem) {
        const label = `${securityProblem.riskAssessment.riskScore} - ${securityProblem.technology} ${securityProblem.title}`;
        super(securityProblem, label);
        this.tooltip = label;
        this.description = '' + securityProblem.riskAssessment.riskLevel;
    }
}

export class CodeLevelVulnerability extends Vulnerability {

    constructor(securityProblem: SecurityProblem) {
        const label = securityProblem.codeLevelVulnerabilityDetails.shortVulnerabilityLocation;
        super(securityProblem, label);
        this.tooltip = securityProblem.title;
        this.description = securityProblem.codeLevelVulnerabilityDetails.vulnerabilityLocation;
    }
}