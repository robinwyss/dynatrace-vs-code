import * as vscode from 'vscode';
import * as path from 'path';
import { SecurityProblem, VulnerabilityType } from './types';

export class DynatraceVulnerabilityProvider implements vscode.TreeDataProvider<Vulnerability> {
    private securityProblems: SecurityProblem[] = [];

    constructor(private vulnerabilityType: VulnerabilityType) { }

    getTreeItem(element: Vulnerability): vscode.TreeItem {
        return element;
    }

    getChildren(element?: Vulnerability): Thenable<Vulnerability[]> {
        if (element) {
            return Promise.resolve([]);
        } else {
            if (this.vulnerabilityType === VulnerabilityType.runtime) {
                return Promise.resolve(this.securityProblems.map(securityProblem => new RuntimeVulnerability(securityProblem)));
            } else if (this.vulnerabilityType === VulnerabilityType.codeLevel) {
                return Promise.resolve(this.securityProblems.map(securityProblem => new CodeLevelVulnerability(securityProblem)));
            } else {
                return Promise.resolve(this.securityProblems.map(securityProblem => new Vulnerability(securityProblem)));
            }

        }
    }

    private _onDidChangeTreeData: vscode.EventEmitter<Vulnerability | undefined | null | void> = new vscode.EventEmitter<Vulnerability | undefined | null | void>();
    readonly onDidChangeTreeData: vscode.Event<Vulnerability | undefined | null | void> = this._onDidChangeTreeData.event;

    updateData(securityProblems: SecurityProblem[]) {
        this.securityProblems = securityProblems;
        this._onDidChangeTreeData.fire();
    }

}

export class Vulnerability extends vscode.TreeItem {

    constructor(securityProblem: SecurityProblem) {
        const label = `${securityProblem.riskAssessment.riskScore} - ${securityProblem.packageName}`;
        super(label, vscode.TreeItemCollapsibleState.None);
        this.tooltip = `${this.label} - ${securityProblem.title}`;
        this.description = '' + securityProblem.riskAssessment.riskLevel;

        const icon = path.join(__filename, '..', '..', 'resources', `security-${securityProblem.riskAssessment.riskLevel.toLowerCase()}.svg`);
        this.iconPath = {
            "dark": icon,
            "light": icon
        };
    }
}

export class RuntimeVulnerability extends vscode.TreeItem {

    constructor(securityProblem: SecurityProblem) {
        const label = `${securityProblem.riskAssessment.riskScore} - ${securityProblem.technology} ${securityProblem.title}`;
        super(label, vscode.TreeItemCollapsibleState.None);
        this.tooltip = label
        this.description = '' + securityProblem.riskAssessment.riskLevel;

        const icon = path.join(__filename, '..', '..', 'resources', `security-${securityProblem.riskAssessment.riskLevel.toLowerCase()}.svg`);
        this.iconPath = {
            "dark": icon,
            "light": icon
        };
    }
}

export class CodeLevelVulnerability extends vscode.TreeItem {

    constructor(securityProblem: SecurityProblem) {
        const label = securityProblem.codeLevelVulnerabilityDetails.shortVulnerabilityLocation;
        super(label, vscode.TreeItemCollapsibleState.None);
        this.tooltip = securityProblem.title;
        this.description = securityProblem.codeLevelVulnerabilityDetails.vulnerabilityLocation;

        const icon = path.join(__filename, '..', '..', 'resources', `security-${securityProblem.riskAssessment.riskLevel.toLowerCase()}.svg`);
        this.iconPath = {
            "dark": icon,
            "light": icon
        };
    }
}